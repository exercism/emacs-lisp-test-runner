{
  "version": 2,
  "status": "fail",
  "message": "Loading /solution/example-partial-fail.el (source)...\r\nRunning 5 tests \r\n   \u001b[01;32m\u001b[Kpassed  1/5  any-old-year\r\u001b[m\u001b[K\n   \u001b[01;32m\u001b[Kpassed  2/5  century\r\u001b[m\u001b[K\nTest exceptional-century backtrace:\r\n  signal(ert-test-failed (((should (leap-year-p 2000)) :form (leap-yea\r\n  ert-fail(((should (leap-year-p 2000)) :form (leap-year-p 2000) :valu\r\n  (if (unwind-protect (setq value-22 (apply fn-20 args-21)) (setq form\r\n  (let (form-description-24) (if (unwind-protect (setq value-22 (apply\r\n  (let ((value-22 (quote ert-form-evaluation-aborted-23))) (let (form-\r\n  (let* ((fn-20 (function leap-year-p)) (args-21 (condition-case err (\r\n  (lambda nil (let* ((fn-20 (function leap-year-p)) (args-21 (conditio\r\n  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test\r\n  ert-run-test(#s(ert-test :name exceptional-century :documentation ni\r\n  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test \r\n  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #\r\n  ert-run-tests-batch(nil)\r\n  ert-run-tests-batch-and-exit()\r\n  command-line-1((\"-l\" \"ert\" \"-l\" \"/opt/test-runner/tests/example-part\r\n  command-line()\r\n  normal-top-level()\r\nTest exceptional-century condition:\r\n    (ert-test-failed\r\n     ((should\r\n       (leap-year-p 2000))\r\n      :form\r\n      (leap-year-p 2000)\r\n      :value nil))\r\n   \u001b[01;31m\u001b[KFAILED  3/5  exceptional-century\r\u001b[m\u001b[K\n   \u001b[01;32m\u001b[Kpassed  4/5  non-leap-even-year\r\u001b[m\u001b[K\n   \u001b[01;32m\u001b[Kpassed  5/5  vanilla-leap-year\r\u001b[m\u001b[K\n\r\nRan 5 tests, 4 results as expected, 1 unexpected \r\n\r\n1 unexpected results:\r\n   \u001b[01;31m\u001b[KFAILED  exceptional-century\r\u001b[m\u001b[K\n\r",
  "tests": [
    {
      "name": "vanilla-leap-year",
      "test_code": "(should (leap-year-p 1996))",
      "status": "pass",
      "message": null
    },
    {
      "name": "any-old-year",
      "test_code": "(should-not (leap-year-p 1997))",
      "status": "pass",
      "message": null
    },
    {
      "name": "non-leap-even-year",
      "test_code": "(should-not (leap-year-p 1997))",
      "status": "pass",
      "message": null
    },
    {
      "name": "century",
      "test_code": "(should-not (leap-year-p 1900))",
      "status": "pass",
      "message": null
    },
    {
      "name": "exceptional-century",
      "test_code": "(should (leap-year-p 2000))",
      "status": "fail",
      "message": "(ert-test-failed\n     ((should\n       (leap-year-p 2000))\n      :form\n      (leap-year-p 2000)\n      :value nil))"
    }
  ]
}
