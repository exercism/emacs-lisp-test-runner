{
  "version": 1,
  "status": "fail",
  "message": "Loading /solution/example-all-fail.el (source)...\nRunning 5 tests \nTest any-old-year backtrace:\n  ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (mod ye\n  (not ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (m\n  leap-year-p(1997)\n  apply(leap-year-p 1997)\n  (setq value-7 (apply fn-5 args-6))\n  (unwind-protect (setq value-7 (apply fn-5 args-6)) (setq form-descri\n  (not (unwind-protect (setq value-7 (apply fn-5 args-6)) (setq form-d\n  (if (not (unwind-protect (setq value-7 (apply fn-5 args-6)) (setq fo\n  (let (form-description-9) (if (not (unwind-protect (setq value-7 (ap\n  (let ((value-7 (quote ert-form-evaluation-aborted-8))) (let (form-de\n  (let* ((fn-5 (function leap-year-p)) (args-6 (condition-case err (le\n  (lambda nil (let* ((fn-5 (function leap-year-p)) (args-6 (condition-\n  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test\n  ert-run-test(#s(ert-test :name any-old-year :documentation nil :body\n  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test \n  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #\n  ert-run-tests-batch(nil)\n  ert-run-tests-batch-and-exit()\n  command-line-1((\"-l\" \"ert\" \"-l\" \"/opt/test-runner/tests/example-all-\n  command-line()\n  normal-top-level()\nTest any-old-year condition:\n    (invalid-function\n     (and\n      (= 0\n\t (mod year 4))\n      (or\n       (not\n\t(= 0 ...))\n       (= 0\n\t  (mod year 401)))))\n   \u001b[01;31m\u001b[KFAILED  1/5  any-old-year\u001b[m\u001b[K\nTest century backtrace:\n  ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (mod ye\n  (not ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (m\n  leap-year-p(1900)\n  apply(leap-year-p 1900)\n  (setq value-17 (apply fn-15 args-16))\n  (unwind-protect (setq value-17 (apply fn-15 args-16)) (setq form-des\n  (not (unwind-protect (setq value-17 (apply fn-15 args-16)) (setq for\n  (if (not (unwind-protect (setq value-17 (apply fn-15 args-16)) (setq\n  (let (form-description-19) (if (not (unwind-protect (setq value-17 (\n  (let ((value-17 (quote ert-form-evaluation-aborted-18))) (let (form-\n  (let* ((fn-15 (function leap-year-p)) (args-16 (condition-case err (\n  (lambda nil (let* ((fn-15 (function leap-year-p)) (args-16 (conditio\n  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test\n  ert-run-test(#s(ert-test :name century :documentation nil :body (lam\n  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test \n  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #\n  ert-run-tests-batch(nil)\n  ert-run-tests-batch-and-exit()\n  command-line-1((\"-l\" \"ert\" \"-l\" \"/opt/test-runner/tests/example-all-\n  command-line()\n  normal-top-level()\nTest century condition:\n    (invalid-function\n     (and\n      (= 0\n\t (mod year 4))\n      (or\n       (not\n\t(= 0 ...))\n       (= 0\n\t  (mod year 401)))))\n   \u001b[01;31m\u001b[KFAILED  2/5  century\u001b[m\u001b[K\nTest exceptional-century backtrace:\n  ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (mod ye\n  (not ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (m\n  leap-year-p(2000)\n  apply(leap-year-p 2000)\n  (setq value-22 (apply fn-20 args-21))\n  (unwind-protect (setq value-22 (apply fn-20 args-21)) (setq form-des\n  (if (unwind-protect (setq value-22 (apply fn-20 args-21)) (setq form\n  (let (form-description-24) (if (unwind-protect (setq value-22 (apply\n  (let ((value-22 (quote ert-form-evaluation-aborted-23))) (let (form-\n  (let* ((fn-20 (function leap-year-p)) (args-21 (condition-case err (\n  (lambda nil (let* ((fn-20 (function leap-year-p)) (args-21 (conditio\n  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test\n  ert-run-test(#s(ert-test :name exceptional-century :documentation ni\n  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test \n  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #\n  ert-run-tests-batch(nil)\n  ert-run-tests-batch-and-exit()\n  command-line-1((\"-l\" \"ert\" \"-l\" \"/opt/test-runner/tests/example-all-\n  command-line()\n  normal-top-level()\nTest exceptional-century condition:\n    (invalid-function\n     (and\n      (= 0\n\t (mod year 4))\n      (or\n       (not\n\t(= 0 ...))\n       (= 0\n\t  (mod year 401)))))\n   \u001b[01;31m\u001b[KFAILED  3/5  exceptional-century\u001b[m\u001b[K\nTest non-leap-even-year backtrace:\n  ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (mod ye\n  (not ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (m\n  leap-year-p(1997)\n  apply(leap-year-p 1997)\n  (setq value-12 (apply fn-10 args-11))\n  (unwind-protect (setq value-12 (apply fn-10 args-11)) (setq form-des\n  (not (unwind-protect (setq value-12 (apply fn-10 args-11)) (setq for\n  (if (not (unwind-protect (setq value-12 (apply fn-10 args-11)) (setq\n  (let (form-description-14) (if (not (unwind-protect (setq value-12 (\n  (let ((value-12 (quote ert-form-evaluation-aborted-13))) (let (form-\n  (let* ((fn-10 (function leap-year-p)) (args-11 (condition-case err (\n  (lambda nil (let* ((fn-10 (function leap-year-p)) (args-11 (conditio\n  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test\n  ert-run-test(#s(ert-test :name non-leap-even-year :documentation nil\n  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test \n  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #\n  ert-run-tests-batch(nil)\n  ert-run-tests-batch-and-exit()\n  command-line-1((\"-l\" \"ert\" \"-l\" \"/opt/test-runner/tests/example-all-\n  command-line()\n  normal-top-level()\nTest non-leap-even-year condition:\n    (invalid-function\n     (and\n      (= 0\n\t (mod year 4))\n      (or\n       (not\n\t(= 0 ...))\n       (= 0\n\t  (mod year 401)))))\n   \u001b[01;31m\u001b[KFAILED  4/5  non-leap-even-year\u001b[m\u001b[K\nTest vanilla-leap-year backtrace:\n  ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (mod ye\n  (not ((and (= 0 (mod year 4)) (or (not (= 0 (mod year 100))) (= 0 (m\n  leap-year-p(1996)\n  apply(leap-year-p 1996)\n  (setq value-2 (apply fn-0 args-1))\n  (unwind-protect (setq value-2 (apply fn-0 args-1)) (setq form-descri\n  (if (unwind-protect (setq value-2 (apply fn-0 args-1)) (setq form-de\n  (let (form-description-4) (if (unwind-protect (setq value-2 (apply f\n  (let ((value-2 (quote ert-form-evaluation-aborted-3))) (let (form-de\n  (let* ((fn-0 (function leap-year-p)) (args-1 (condition-case err (le\n  (lambda nil (let* ((fn-0 (function leap-year-p)) (args-1 (condition-\n  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test\n  ert-run-test(#s(ert-test :name vanilla-leap-year :documentation nil \n  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test \n  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #\n  ert-run-tests-batch(nil)\n  ert-run-tests-batch-and-exit()\n  command-line-1((\"-l\" \"ert\" \"-l\" \"/opt/test-runner/tests/example-all-\n  command-line()\n  normal-top-level()\nTest vanilla-leap-year condition:\n    (invalid-function\n     (and\n      (= 0\n\t (mod year 4))\n      (or\n       (not\n\t(= 0 ...))\n       (= 0\n\t  (mod year 401)))))\n   \u001b[01;31m\u001b[KFAILED  5/5  vanilla-leap-year\u001b[m\u001b[K\n\nRan 5 tests, 0 results as expected, 5 unexpected \n\n5 unexpected results:\n   \u001b[01;31m\u001b[KFAILED  any-old-year\u001b[m\u001b[K\n   \u001b[01;31m\u001b[KFAILED  century\u001b[m\u001b[K\n   \u001b[01;31m\u001b[KFAILED  exceptional-century\u001b[m\u001b[K\n   \u001b[01;31m\u001b[KFAILED  non-leap-even-year\u001b[m\u001b[K\n   \u001b[01;31m\u001b[KFAILED  vanilla-leap-year\u001b[m\u001b[K"
}
